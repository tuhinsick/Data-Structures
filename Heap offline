#include<bits/stdc++.h>
using namespace std;

class PriorityQueue{
    int *h;
    int size;
    int maxsize;
    public : 
      PriorityQueue(int n){
        h = new int[n];
        maxsize = n;
        size = 0;
      }

      int parent(int i){
        return (i-1)/2;
      }

      int lchild(int i){
        return 2*i + 1;
      }

      int rchild(int i){
        return 2*i + 2;
      }

      void shiftUp(int i){

        while(i!=0 && h[i]>h[parent(i)]){
            swap(h[i],h[parent(i)]);
            i = parent(i);
           
        }
      }

      void shiftDown(int i){
        int index = i;
        int l = lchild(i);
        if(l<size && h[i]<h[l]){
            i = l;
        }

        int r = rchild(i);

        if(r<size && h[i]<h[r]){
            i = r;
        }

        if(i!= index){
            swap(h[i],h[index]);
            shiftDown(i);
        }
      }

      void insert(int item){
        // we should check the maxsize here;
        if(size == maxsize){
            maxsize*=2;
            int *newar = new int[maxsize];
            for(int i=0;i<size;i++){
                newar[i] = h[i];
            }

            delete[] h;
            h = newar;
        }
        h[size++] = item;
        shiftUp(size-1);  // as inserting an item is in the last position. so we called shiftUp here...
      }

      int ExtractMax(){
        int ret = h[0];
        h[0] = h[size-1];
        size--;
        shiftDown(0);

        return ret;
      }

      bool find(int item){
        for(int i=0;i<size;i++){
            if(h[i] == item){
                return true;
            }
        }

        return false;
      }


      void traversal(){
        int level = 0;
        int i = 0;
        int flag = 0;
        while(1){
            int k = pow(2,level);
            while(k--){
                cout<<h[i++]<<" ";
                if(i == size){
                    flag = 1;
                    break;
                }

            }
            cout<<endl;
            level++;
            if(flag == 1){
                break;
            }
        }
      }

      void heapSort(){
        int* n = new int[size];
        int k = size;
        for(int i=0;i<k;i++){
            n[i] = ExtractMax();
        }
        size = k;
        for(int i=0;i<size;i++){
            h[i] = n[i];
        }

        delete[] n;
      }

      bool checking_minHeap(int a[]){
        int elements = sizeof(a)/sizeof(a[0]);
        int flag = 0;
        for(int i=0;i<elements/2;i++){
            int l = lchild(i);
            int r = rchild(i);
            if(a[i]>a[l] || a[i]>a[r]){
                return false;
            }

        }

        return true;
      }




};

void insert(PriorityQueue& p, int item){
    p.insert(item);
}

int find(PriorityQueue& p, int item){
    int x;
    if(p.find(item)){
        x = 1;
    }

    else{
        x = -1;
    }

    return x;
}

int  deleted(PriorityQueue& p){
    return p.ExtractMax();
}

int main(){
    int n=8, m = 5;
    int A[] = {1, 2, 3, 4, 5};
    int B []= {1, 3, 2, 9, 10};
    PriorityQueue p(500),q(3);
    for(int i=0;i<5;i++){
        p.insert(A[i]);
    }

    for(int i=0;i<m;i++){
        insert(q,B[i]);
    }

    // p.heapSort();
    // p.traversal();
    // p.insert(100);
    // cout<<endl;
    // p.traversal();
    // p.insert(0);
    // cout<<endl;
    // p.traversal();

    bool x = p.checking_minHeap(A);
    if(x){
        cout<<"yes"<<endl;
    }

    else{
        cout<<"no"<<endl;
    }

    // p.traversal();
    // q.traversal();


    // for(int i=0;i<m;i++){
    //     int x = find(p,B[i]);
    //     cout<<x<<endl;
    //     if(x == 1){
    //         int d = deleted(p);
    //         cout<<d<<endl;
    //     }
    // }

}
