#include<bits/stdc++.h>
using namespace std;

class minHeap{
    int *arr;
    int heapsize;
    int maxsize;
    public : 
      minHeap(int t){
        maxsize = t;
        heapsize = 0;
        arr = new int[t];
      }

      int FindMin(){
        return arr[0];
      }

      int parent(int i){
        return (i-1)/2;
      }

      int FindIndex(int key){
        int i = 0;
        while(i<heapsize){
            if(arr[i] == key){
                break;
            }
            i++;
        }
        return key;
      }

      void minHeapify(int arr[], int i){
        while(i!=0 && arr[parent(i)]>arr[i]){
            swap(arr[i],arr[parent(i)]);
            i = parent(i);
        }
      }

      int ExtractMin(){
        int i = heapsize - 1;
        int ret = arr[0];
        arr[0] = arr[i];
        minHeapify(arr,i);
        heapsize--;

        return ret;
      }

      void insertKey(int key){
        if(heapsize == maxsize){
            maxsize*=2;
            int *newar = new int[maxsize];
            int i = 0;
            while(i<heapsize){
                newar[i] = arr[i];
                i++;
            }

            delete[] arr;
            arr = newar;
        }

        int k = heapsize++;
        arr[k] = key;
        minHeapify(arr,k);

        

      }

      void decreaseKey(int prev,int next){
        int i = FindIndex(prev);
        arr[i] = next;
        minHeapify(arr,i);
      }

      void print(){
        int level = 0;
        int i = 0;
        int flag = 0;
        while(1){
            int ind = pow(2,level);
            while(ind--){
                if(i<heapsize){
                cout<<arr[i++]<<" ";
                }

                else{
                    flag = 1;
                    break;
                }
            }

            cout<<endl;

            if(flag == 1){
                break;
            }

            level++;

        }
      }
      
};

int main(){
    minHeap heap(2);
    heap.insertKey(7);
    heap.insertKey(10);
    heap.insertKey(5);
    heap.print();
    heap.insertKey(12);
    heap.insertKey(15);
    heap.insertKey(1);
    
    // cout<<heap.FindMin()<<endl;
    heap.print();
}
